import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:pictureai/features/auth/screens/auth_screen.dart';
import 'package:pictureai/models/openaiservices.dart';
import 'package:screenshot/screenshot.dart';
import 'package:share_plus/share_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../../constants/global_variables.dart';
import '../../../constants/utils.dart';

class HomeScreen extends StatefulWidget {
  static const String routeName = '/home';
  const HomeScreen({Key? key}) : super(key: key);

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  // Variables Initilizings
  var sizes = ["Small", "Medium", "Large"];
  var values = ["256x256", "512x512", "1024x1024"];
  String? dropValue;
  var textcontroller = TextEditingController();
  String image = '';
  var isLoaded = false;
  
ScreenshotController screenshotcontroller= new ScreenshotController();

  void navigateToSearchScreen(String query) {
    //Navigator.pushNamed(context, SearchScreen.routeName, arguments: query);
  }

Future<void> shareImage() async {
  try {
    Uint8List? img = await screenshotcontroller.capture(delay: Duration(milliseconds: 100), pixelRatio: 1.0);
    if (img != null) {
      final directory = await getApplicationDocumentsDirectory();
      const filename = 'pictureai.png';
      final path = '${directory.path}/$filename';
      final imageFile = File(path);

      // Write the image as bytes to the file
      await imageFile.writeAsBytes(img);

      // Share the image file
      List<XFile> xFiles = [XFile(path)]; // Convert the file path to XFile
      Share.shareXFiles(xFiles, text: 'Generated By Picture AI');

      print('Screenshot saved to $path');
    } else {
      print('Failed to take a screenshot');
    }
  } catch (e) {
    print('Error: $e');
  }
}

downloadimg() async {
  var result = await Permission.storage.request();
  if (result.isGranted) {
    final foldername = "Picture Ai Image";
    // Get the application documents directory
    final directory = await getExternalStorageDirectory();
    final path = Directory("${directory?.path}/$foldername");
    final filename = "${DateTime.now().millisecondsSinceEpoch}.png";
    if (await path.exists()) {
      await screenshotcontroller.captureAndSave(path.path,
          delay: Duration(milliseconds: 100),
          fileName: filename,
          pixelRatio: 1.0);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Downloaded to ${path.path}"),
        ),
      );
    } else {
      // Create the directory if it doesn't exist
      await path.create(recursive: true);
      await screenshotcontroller.captureAndSave(path.path,
          delay: Duration(milliseconds: 100),
          fileName: filename,
          pixelRatio: 1.0);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text("Downloaded to ${path.path}"),
        ),
      );
    }
  } else {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Permission denied'),
      ),
    );
  }
}
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(60),
        child: AppBar(
          actions: [
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  foregroundColor: GlobalVariables.whitecolor,
                  backgroundColor: GlobalVariables.btncolor,
                  shape: const StadiumBorder(),
                  minimumSize: Size(5, 40), // Adjust the size as needed
                ),
                onPressed: () async {
                  setState(() {
                    isLoaded = false;
                  });
                  textcontroller.text = '';
                },
                child: Icon(
                  Icons.refresh,
                ),
                // Omit the label parameter
                // label: const Text("Refresh"),
              ),
            ),
          ],
          backgroundColor: GlobalVariables.backgroundColor,
          centerTitle: true,
          title: const Text(
            GlobalVariables.WelcomeText,
            style: TextStyle(
              fontFamily: 'Poppins-Bold',
              letterSpacing: 1.0,
              fontSize: 20,
              color: GlobalVariables.whitecolor,
            ),
          ),
          // flexibleSpace: Container(
          //   decoration: const BoxDecoration(
          //     gradient: GlobalVariables.appBarGradient,
          //   ),
          // ),
        ),
      ),
      body: Padding(
        padding: EdgeInsets.all(8.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              Container(
                //color: Colors.red,
                // Remove the fixed height to allow the container to expand
                height: 150,
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Container(
                              height: 50,
                              padding: const EdgeInsets.symmetric(
                                  horizontal: 16, vertical: 3),
                              decoration: BoxDecoration(
                                color: Colors.white, // Changed to direct color
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: TextFormField(
                                controller: textcontroller,
                                decoration: InputDecoration(
                                  hintText: 'eg: A monkey writing code',
                                  border: InputBorder.none,
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(
                            width: 12,
                          ),
                          Container(
                            height: 47,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 4.5, vertical: 2),
                            decoration: BoxDecoration(
                              color: Colors.white, // Changed to direct color
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: DropdownButtonHideUnderline(
                              child: DropdownButton(
                                icon: const Icon(
                                  Icons.expand_more,
                                  color: GlobalVariables.btncolor,
                                ),
                                value: dropValue,
                                hint: const Text('Select size'),
                                items: List.generate(
                                  sizes.length,
                                  (index) => DropdownMenuItem(
                                    child: Text(
                                      sizes[index],
                                    ),
                                    value: values[index],
                                  ),
                                ),
                                onChanged: (value) {
                                  setState(() {
                                    dropValue = value
                                        .toString(); // Update dropValue with the selected value
                                  });
                                },
                              ),
                            ),
                          ),
                        ],
                      ),
                      SizedBox(
                        width: 300,
                        height: 44,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            foregroundColor: GlobalVariables.whitecolor,
                            backgroundColor: GlobalVariables.btncolor,
                            shape: const StadiumBorder(),
                          ),
                          onPressed: () async {
                            if (textcontroller.text.isNotEmpty &&
                                dropValue!.isNotEmpty) {
                              showDialog(
                                context: context,
                                barrierDismissible:
                                    false, // Prevent user from dismissing the dialog by tapping outside
                                builder: (BuildContext context) {
                                  return AlertDialog(
                                    content: Column(
                                      mainAxisSize: MainAxisSize.min,
                                      children: [
                                        CircularProgressIndicator(),
                                        SizedBox(height: 16),
                                        Text('Picture is generating...'),
                                      ],
                                    ),
                                  );
                                },
                              );

                              try {
                                image = await API.generateImage(
                                    textcontroller.text, dropValue!);
                                setState(() {
                                  isLoaded = true;
                                });
                              } catch (error) {
                                // Handle error
                                print(error);
                              } finally {
                                Navigator.pop(context); // Close the dialog
                              }
                            } else {
                              showErrorDialog(context,
                                  'Please pass the query and select size');
                            }
                          },
                          child: const Text("Generate"),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
              SizedBox(height: 10),
              Container(
                height: 490,
                //color: Colors.amber,
                child: isLoaded
                    ? Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                            clipBehavior: Clip.antiAlias,
                            decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Screenshot(
                              controller:screenshotcontroller,
                              child: Image.network(
                                image,
                                fit: BoxFit.contain,
                              ),
                            ),
                          ),
                          const SizedBox(
                            height: 19,
                          ),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Container(
                                child: SizedBox(
                                  width: 220, // Adjust the width as needed
                                  height: 50, // Adjust the height as needed
                                  child: ElevatedButton.icon(
                                    icon: Icon(
                                        Icons.download_for_offline_rounded),
                                    style: ElevatedButton.styleFrom(
                                      padding: EdgeInsets.all(8),
                                      backgroundColor: GlobalVariables.btncolor,
                                      foregroundColor:
                                          GlobalVariables.whitecolor,
                                    ),
                                    onPressed: () => {downloadimg()},
                                    label: Text('Download'),
                                  ),
                                ),
                              ),
                              const SizedBox(
                                width: 12,
                              ),
                              Container(
                                child: SizedBox(
                                  width: 120, // Adjust the width as needed
                                  height: 50, // Adjust the height as needed
                                  child: ElevatedButton.icon(
                                    icon: Icon(
                                      Icons.share,
                                    ),
                                    style: ElevatedButton.styleFrom(
                                      padding: EdgeInsets.all(8),
                                      backgroundColor: GlobalVariables.btncolor,
                                      foregroundColor:
                                          GlobalVariables.whitecolor,
                                    ),
                                    onPressed: () => {shareImage() ,
                                    },
                                    label: Text('Share'),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ],
                      )
                    : Container(
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(12),
                          color: GlobalVariables.whitecolor,
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Image.asset(
                              "assets/images/loader.gif",
                            ),
                            const Text(
                              '🤖 Meet Our DR AI',
                              style: TextStyle(
                                fontSize: 16,
                                color: Color.fromARGB(255, 139, 139, 139),
                              ),
                            ),
                          ],
                        ),
                      ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// void logOut(BuildContext context) async {
//   try {
//     SharedPreferences sharedPreferences = await SharedPreferences.getInstance();
//     await sharedPreferences.setString('x-auth-token', '');
//     Navigator.pushNamedAndRemoveUntil(
//       context,
//       AuthScreen.routeName,
//       (route) => false,
//     );
//   } catch (e) {
//     print(e);
//   }
// }
